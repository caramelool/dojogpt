// Code generated by MockGen. DO NOT EDIT.
// Source: ./openai.go

// Package mock is a generated GoMock package.
package mock

import (
	model "dojogpt/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOpenAI is a mock of OpenAI interface.
type MockOpenAI struct {
	ctrl     *gomock.Controller
	recorder *MockOpenAIMockRecorder
}

// MockOpenAIMockRecorder is the mock recorder for MockOpenAI.
type MockOpenAIMockRecorder struct {
	mock *MockOpenAI
}

// NewMockOpenAI creates a new mock instance.
func NewMockOpenAI(ctrl *gomock.Controller) *MockOpenAI {
	mock := &MockOpenAI{ctrl: ctrl}
	mock.recorder = &MockOpenAIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenAI) EXPECT() *MockOpenAIMockRecorder {
	return m.recorder
}

// Completions mocks base method.
func (m *MockOpenAI) Completions(r *model.CompletionsRequest) (*model.CompletionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Completions", r)
	ret0, _ := ret[0].(*model.CompletionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Completions indicates an expected call of Completions.
func (mr *MockOpenAIMockRecorder) Completions(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Completions", reflect.TypeOf((*MockOpenAI)(nil).Completions), r)
}
